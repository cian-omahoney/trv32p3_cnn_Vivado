
// File generated by Go version U-2022.12#33f3808fcb#221128, Thu Jan 25 16:08:15 2024
// Copyright 2014-2022 Synopsys, Inc. All rights reserved.
// go -I../lib -F -DSYNTHESIS_NO_UNGROUP -D__tct_patch__=0 -Verilog -otrv32p3_cnn_vlog -cgo_options.cfg -Itrv32p3_cnn_vlog/tmp_pdg -updg -updg_controller trv32p3_cnn



`timescale 1ns/1ps

module trv32p3_cnn
  #(
    // synopsys translate_off
    parameter reg_log = 1'b1,
    // synopsys translate_on
    parameter nid = 1
  )
  ( input         clock,
    input         reset_ext,
    input  [31:0] pm_rd_in, // iword
    output [31:0] pm_addr_out, // addr
    output [31:0] pm_wr_out, // iword
    output        pm_st_out, // std_logic
    output        pm_ld_out, // std_logic
    input  [15:0] dbg_instr_in,
    input  [31:0] dbg_data_pi_in,
    output [31:0] dbg_data_po_out,
    input         dbg_data_we_in,
    input         dbg_instr_exec_in,
    input         dbg_ext_break_in,
    output        dbg_set_break_out,
    output        edm_ld_out, // uint1_t
    output [31:0] edm_addr_out, // addr
    input  [31:0] edm_rd_in, // v4u8
    output  [3:0] edm_st_out, // uint4_t_as_vect
    output [31:0] edm_wr_out // v4u8
  );


  wire   signed [31:0] aluA; // w32
  wire   signed [31:0] aluB; // w32
  wire   signed [31:0] aluR; // w32
  wire   signed [31:0] pcaA; // w32
  wire   signed [31:0] pcaB; // w32
  wire   signed [31:0] pcaR; // w32
  wire   signed [31:0] cmpA; // w32
  wire   signed [31:0] cmpB; // w32
  wire   cmpF; // bool
  wire   signed [31:0] divA; // w32
  wire   signed [31:0] divB; // w32
  wire   [4:0] div_wad; // t5u
  wire   X_x_w1_div_main_pdg_en; // uint1_t
  wire   [4:0] X_x_w1_div_main_pdg_w_a; // t5unz
  wire   [4:0] div_adr; // t5unz
  wire   div_bsy; // t1u
  wire   div_wnc; // t1u
  wire   signed [31:0] x_w11; // w32
  wire   signed [31:0] dmw_rd_dp; // w32
  wire   signed [7:0] lxB; // w08
  wire   signed [15:0] lxH; // w16
  wire   signed [31:0] lxR; // w32
  wire   signed [31:0] aguA; // w32
  wire   signed [31:0] aguB; // w32
  wire   signed [31:0] aguR; // w32
  wire   signed [31:0] mpyA; // w32
  wire   signed [31:0] mpyB; // w32
  wire   [1:0] mpyM; // t2u
  wire   signed [31:0] mpyH; // w32
  wire   signed [31:0] mpyL; // w32
  wire   __ocd_ld_DMbEX_r; // bool
  wire   __ocd_ld_PMbEX_r; // bool
  wire   __ocd_st_DMbEX_r; // bool
  wire   __ocd_st_PMbEX_r; // bool
  wire   [31:0] ocd_addr_r; // addr
  wire   [31:0] ocd_addr_w; // addr
  wire   signed [31:0] xuA; // w32
  wire   signed [31:0] xuB; // w32
  wire   signed [31:0] xuC; // w32
  wire   signed [31:0] cnn_R; // w32
  wire   [31:0] dm_addr; // addr
  wire   dmb_ld; // std_logic
  wire   dmb_st; // std_logic
  wire   signed [7:0] dmb_wr; // w08
  wire   dmh_ld; // std_logic
  wire   dmh_st; // std_logic
  wire   signed [15:0] dmh_wr; // w16
  wire   dmw_ld; // std_logic
  wire   dmw_st; // std_logic
  wire   signed [31:0] dmw_wr; // w32
  wire   [31:0] wdm_rd; // v4u8
  wire   signed [7:0] dmb_rd; // w08
  wire   signed [15:0] dmh_rd; // w16
  wire   signed [31:0] dmw_rd; // w32
  wire   [31:0] wdm_addr; // addr
  wire   wdm_ld; // uint1_t
  wire   [3:0] wdm_st; // uint4_t_as_vect
  wire   [31:0] wdm_wr; // v4u8
  wire   [31:0] edm_rd; // v4u8
  wire   [31:0] edm_addr; // addr
  wire   edm_ld; // uint1_t
  wire   [3:0] edm_st; // uint4_t_as_vect
  wire   [31:0] edm_wr; // v4u8
  wire   cnd; // bool
  wire   hzd_stall;
  wire   issue_sig;
  wire   signed [31:0] jmp_tgt_EX; // w32
  wire   signed [31:0] jmp_tgt_ID; // w32
  wire   ocd_exe; // t1u
  wire   [31:0] ocd_instr_r; // iword
  wire   ocd_req; // t1u
  wire   [31:0] pcr; // addr
  wire   [31:0] pm_rd_dp; // iword
  wire   PC_ID_PC_ID_w_cntrl_issue_pdg_en; // std_logic
  wire   [31:0] PC_ID_w; // addr
  wire   PC_pcw_cntrl_nxtpc_pdg_en; // std_logic
  wire   kill_ID;
  wire   signed [31:0] lnk_id; // w32
  wire   ocd_mode; // t1u
  wire   [31:0] pcw; // addr
  wire   [31:0] pm_addr1; // addr
  wire   pm_ld_pdg_en; // std_logic
  wire   trn_ID_valid;
  wire   [31:0] trn_IR_ID;
  wire   [31:0] PC_ID_r; // addr
  wire   [31:0] PC_EX_w; // addr
  wire   [31:0] PC_EX_r; // addr
  wire   [4:0] __X_x_r1_raddr; // t5u
  wire   [4:0] __X_x_r2_raddr; // t5u
  wire   [4:0] __X_x_r3_raddr; // t5u
  wire   [4:0] __X_x_w1_wad; // t5u
  wire   [4:0] __X_x_w2_waddr; // t5u
  wire   signed [31:0] x_w1; // w32
  wire   signed [31:0] x_w2; // w32
  wire   signed [31:0] x_r1; // w32
  wire   signed [31:0] x_r2; // w32
  wire   signed [31:0] x_r3; // w32
  wire   en_ocd_addr_pdcw; // std_logic
  wire   [31:0] ocd_addr_pdcw; // addr
  wire   [31:0] ocd_addr_pdcr; // addr
  wire   __ocd_ld_DMbS3_r; // bool
  wire   en_ocd_data_pdcw; // std_logic
  wire   signed [7:0] ocd_data_pdcw; // w08
  wire   signed [7:0] ocd_data_w; // w08
  wire   signed [7:0] ocd_data_pdcr; // w08
  wire   signed [7:0] ocd_data_r; // w08
  wire   __ocd_ld_PMbS3_r; // bool
  wire   en_ocd_instr_pdcw; // std_logic
  wire   [31:0] ocd_instr_pdcw; // iword
  wire   [31:0] ocd_instr_w; // iword
  wire   [31:0] ocd_instr_pdcr; // iword
  wire   [31:0] pm_addr_dp; // addr
  wire   [31:0] pm_rd; // iword
  wire   [31:0] pm_wr_dp; // iword
  wire   [31:0] pm_addr; // addr
  wire   pm_ld; // std_logic
  wire   pm_st; // std_logic
  wire   [31:0] pm_wr; // iword
  wire   __ocd_st_DMbS3_r; // bool
  wire   [31:0] dm_addr_dp; // addr
  wire   signed [7:0] dmb_wr_dp; // w08
  wire   signed [15:0] dmh_wr_dp; // w16
  wire   signed [31:0] dmw_wr_dp; // w32
  wire   signed [7:0] dmb_rd_dp; // w08
  wire   signed [15:0] dmh_rd_dp; // w16
  wire   signed [19:0] C_t20s_rp12_EX_31_12; // t20s_rp12
  wire   signed [31:0] __pidTGT_r; // w32
  wire   signed [31:0] x_w1_dead; // w32
  wire   signed [11:0] C_t12s_EX_31_20; // t12s
  wire   signed [11:0] C_t12s_ID_31_20; // t12s
  wire   signed [12:0] C_t13s_s2_ID_31_7_30_25_11_8; // t13s_s2
  wire   signed [20:0] of21; // t21s_s2
  wire   signed [20:0] C_t21s_s2_ID_31_19_12_20_30_21; // t21s_s2
  wire   signed [12:0] C_t13s_s2_EX_31_7_30_25_11_8; // t13s_s2
  wire   signed [12:0] of13_cd; // t13s_s2
  wire   signed [31:0] trgt; // w32
  wire   signed [30:0] jmp_tgt_algn2; // t31s_rp1
  wire   signed [11:0] C_t12s_ID_31_25_11_7; // t12s
  wire   ocd_swbreak; // t1u
  wire   signed [31:0] __pidTGT_w; // w32
  wire   ocd_ld_DMb; // bool
  wire   __ocd_ld_DMbID_w; // bool
  wire   __ocd_ld_DMbEX_w; // bool
  wire   ocd_st_DMb; // bool
  wire   __ocd_st_DMbID_w; // bool
  wire   __ocd_st_DMbEX_w; // bool
  wire   ocd_ld_PMb; // bool
  wire   __ocd_ld_PMbID_w; // bool
  wire   __ocd_ld_PMbEX_w; // bool
  wire   ocd_st_PMb; // bool
  wire   __ocd_st_PMbID_w; // bool
  wire   [31:0] dbg_data_pi;
  wire   dbg_data_we;
  wire   dbg_ext_break;
  wire   dbg_instr_exec;
  wire   [15:0] dbg_instr;
  wire   [31:0] dbg_data_po;
  wire   dbg_reset;
  wire   dbg_set_break;
  wire   [34:0] EX_enabling;
  wire   [23:0] ID_enabling;
  wire   [31:0] reg_IR_EX;
  wire   [31:0] reg_IR_ID;

  wire reset;

  assign reset = reset_ext || dbg_reset;

  assign pm_rd = pm_rd_in;
  assign pm_addr_out = pm_addr;
  assign pm_wr_out = pm_wr;
  assign pm_st_out = pm_st;
  assign pm_ld_out = pm_ld;
  assign dbg_instr = dbg_instr_in;
  assign dbg_data_pi = dbg_data_pi_in;
  assign dbg_data_po_out = dbg_data_po;
  assign dbg_data_we = dbg_data_we_in;
  assign dbg_instr_exec = dbg_instr_exec_in;
  assign dbg_ext_break = dbg_ext_break_in;
  assign dbg_set_break_out = dbg_set_break;
  assign edm_ld_out = edm_ld;
  assign edm_addr_out = edm_addr;
  assign edm_rd = edm_rd_in;
  assign edm_st_out = edm_st;
  assign edm_wr_out = edm_wr;

  assign C_t20s_rp12_EX_31_12 = $signed(reg_IR_EX[31:12]);
  assign C_t12s_EX_31_20 = $signed(reg_IR_EX[31:20]);
  assign C_t12s_ID_31_20 = $signed(reg_IR_ID[31:20]);
  assign C_t13s_s2_ID_31_7_30_25_11_8 = $signed({reg_IR_ID[31], reg_IR_ID[7], reg_IR_ID[30:25], reg_IR_ID[11:8], 1'b0});
  assign C_t21s_s2_ID_31_19_12_20_30_21 = $signed({reg_IR_ID[31], reg_IR_ID[19:12], reg_IR_ID[20], reg_IR_ID[30:21], 1'b0});
  assign C_t13s_s2_EX_31_7_30_25_11_8 = $signed({reg_IR_EX[31], reg_IR_EX[7], reg_IR_EX[30:25], reg_IR_EX[11:8], 1'b0});
  assign C_t12s_ID_31_25_11_7 = $signed({reg_IR_ID[31:25], reg_IR_ID[11:7]});

  // expanded mux_dmh_wr
  // (dmh_wr_copy0_x_r2_EX)
  // [ldst.n:100](regX.n:82)
  assign dmh_wr_dp = $signed(x_r2[15:0]);

  // expanded mux_dmw_wr
  // (dmw_wr_copy0_x_r2_EX)
  // [ldst.n:101](regX.n:82)
  assign dmw_wr_dp = x_r2;

  // expanded mux_PC_EX_w
  // (PC_EX_w_copy0_PC_ID_r_ID)
  // [alu.n:209]
  assign PC_EX_w = PC_ID_r;

  // expanded mux_x_w2
  // (x_w2_copy0_cnn_w1_EX)
  // [cnn.n:35](regX.n:107)
  assign x_w2 = cnn_R;

  // expanded mux_cmpA
  // (cmpA_copy0_x_r1_EX)
  // [ctrl.n:94](regX.n:75)
  assign cmpA = x_r1;

  // expanded mux_cmpB
  // (cmpB_copy0_x_r2_EX)
  // [ctrl.n:95](regX.n:82)
  assign cmpB = x_r2;

  // expanded mux_cnd
  // (cnd_copy0_cmpF_EX)
  // [ctrl.n:106]
  assign cnd = cmpF;

  // expanded mux_of21
  // (of21_copy0___CTt21s_s2_cstP31_20P12_19_12P20_11P21_10_1_ID)
  // [ctrl.n:154][ctrl.n:161]
  assign of21 = C_t21s_s2_ID_31_19_12_20_30_21;

  // expanded mux_of13_cd
  // (of13_cd_copy0___CTt13s_s2_cstP31_12P7_11P25_10_5P8_4_1_EX)
  // [ctrl.n:106]
  assign of13_cd = C_t13s_s2_EX_31_7_30_25_11_8;

  // expanded mux_trgt
  // (trgt_copy0_pcaR_ID)
  // [ctrl.n:193]
  assign trgt = pcaR;

  // expanded mux_jmp_tgt_EX
  // (jmp_tgt_EX_copy0_pidTGT_EX)
  // [ctrl.n:115]
  assign jmp_tgt_EX = __pidTGT_r;

  // expanded mux_jmp_tgt_algn2
  // (jmp_tgt_algn2_copy0_trgt_ID)
  // [ctrl.n:200]
  assign jmp_tgt_algn2 = $signed(trgt[31:1]);

  // expanded mux_divA
  // (divA_copy0_x_r1_EX)
  // [div.n:58](regX.n:75)
  assign divA = x_r1;

  // expanded mux_divB
  // (divB_copy0_x_r2_EX)
  // [div.n:59](regX.n:82)
  assign divB = x_r2;

  // expanded mux_div_wad
  // (div_wad_copy0___CTt5u_cstP7_EX)
  // [div.n:60]
  assign div_wad = reg_IR_EX[11:7];

  // expanded mux_lxB
  // (lxB_copy0_dmb_rd_EX)
  // [ldst.n:68][ldst.n:69]
  assign lxB = dmb_rd_dp;

  // expanded mux_lxH
  // (lxH_copy0_dmh_rd_EX)
  // [ldst.n:70][ldst.n:71]
  assign lxH = dmh_rd_dp;

  // expanded mux_aguA
  // (aguA_copy0_x_r3_ID)
  // [ldst.n:54][ldst.n:91](regX.n:89)
  assign aguA = x_r3;

  // expanded mux_mpyA
  // (mpyA_copy0_x_r1_EX)
  // [mpy.n:61](regX.n:75)
  assign mpyA = x_r1;

  // expanded mux_mpyB
  // (mpyB_copy0_x_r2_EX)
  // [mpy.n:62](regX.n:82)
  assign mpyB = x_r2;

  // expanded mux_xuC
  // (xuC_copy0_cnn_r3_EX)
  // [cnn.n:31]
  assign xuC = x_r3;

  // expanded mux_xuB
  // (xuB_copy0_cnn_r2_EX)
  // [cnn.n:31]
  assign xuB = x_r2;

  // expanded mux_xuA
  // (xuA_copy0_cnn_r1_EX)
  // [cnn.n:31]
  assign xuA = x_r1;

  // expanded mux___ocd_ld_DMbID_w
  // (__ocd_ld_DMbID_w_cp_ocd_ld_DMb_ID)
  assign __ocd_ld_DMbID_w = ocd_ld_DMb;

  // expanded mux___ocd_ld_DMbEX_w
  // (__ocd_ld_DMbEX_w_cp___ocd_ld_DMbEX_r_EX)
  assign __ocd_ld_DMbEX_w = __ocd_ld_DMbEX_r;

  // expanded mux___ocd_st_DMbID_w
  // (__ocd_st_DMbID_w_cp_ocd_st_DMb_ID)
  assign __ocd_st_DMbID_w = ocd_st_DMb;

  // expanded mux___ocd_st_DMbEX_w
  // (__ocd_st_DMbEX_w_cp___ocd_st_DMbEX_r_EX)
  assign __ocd_st_DMbEX_w = __ocd_st_DMbEX_r;

  // expanded mux___ocd_ld_PMbID_w
  // (__ocd_ld_PMbID_w_cp_ocd_ld_PMb_ID)
  assign __ocd_ld_PMbID_w = ocd_ld_PMb;

  // expanded mux___ocd_ld_PMbEX_w
  // (__ocd_ld_PMbEX_w_cp___ocd_ld_PMbEX_r_EX)
  assign __ocd_ld_PMbEX_w = __ocd_ld_PMbEX_r;

  // expanded mux___ocd_st_PMbID_w
  // (__ocd_st_PMbID_w_cp_ocd_st_PMb_ID)
  assign __ocd_st_PMbID_w = ocd_st_PMb;

  alu inst_alu(
      .bin_selector_EX(EX_enabling[3:0]),
      .aluA_in(aluA),
      .aluB_in(aluB),
      .aluR_out(aluR));

  pca inst_pca(
      .ohe_selector_ID(ID_enabling[0]),
      .pcaA_in(pcaA),
      .pcaB_in(pcaB),
      .pcaR_out(pcaR));

  cmp inst_cmp(
      .bin_selector_EX(EX_enabling[6:4]),
      .cmpA_in(cmpA),
      .cmpB_in(cmpB),
      .cmpF_out(cmpF));

  div inst_div(
      .reset(reset),
      .clock(clock),
      .en_divR_divs_divA_divB_div_EX(EX_enabling[7]),
      .en_divR_divu_divA_divB_div_EX(EX_enabling[8]),
      .en_divR_rems_divA_divB_div_EX(EX_enabling[9]),
      .en_divR_remu_divA_divB_div_EX(EX_enabling[10]),
      .divA_in(divA),
      .divB_in(divB),
      .div_wad_in(div_wad),
      .X_x_w1_div_main_pdg_en_out(X_x_w1_div_main_pdg_en),
      .X_x_w1_div_main_pdg_w_a_out(X_x_w1_div_main_pdg_w_a),
      .div_adr_out(div_adr),
      .div_bsy_out(div_bsy),
      .div_wnc_out(div_wnc),
      .x_w1_out(x_w11));

  lx inst_lx(
      .bin_selector_EX(EX_enabling[13:11]),
      .dmw_rd_dp_in(dmw_rd_dp),
      .lxB_in(lxB),
      .lxH_in(lxH),
      .lxR_out(lxR));

  agu inst_agu(
      .ohe_selector_ID(ID_enabling[1]),
      .aguA_in(aguA),
      .aguB_in(aguB),
      .aguR_out(aguR));

  mpy inst_mpy(
      .ohe_selector_EX(EX_enabling[14]),
      .mpyA_in(mpyA),
      .mpyB_in(mpyB),
      .mpyM_in(mpyM),
      .mpyH_out(mpyH),
      .mpyL_out(mpyL));

  ocd_addr_incr inst_ocd_addr_incr(
      .__ocd_ld_DMbEX_r_in(__ocd_ld_DMbEX_r),
      .__ocd_ld_PMbEX_r_in(__ocd_ld_PMbEX_r),
      .__ocd_st_DMbEX_r_in(__ocd_st_DMbEX_r),
      .__ocd_st_PMbEX_r_in(__ocd_st_PMbEX_r),
      .ocd_addr_r_in(ocd_addr_r),
      .ocd_addr_w_out(ocd_addr_w));

  cnn inst_cnn(
      .ohe_selector_EX(EX_enabling[15]),
      .xuA_in(xuA),
      .xuB_in(xuB),
      .xuC_in(xuC),
      .cnn_R_out(cnn_R));

  dm_merge inst_dm_merge(
      .reset(reset),
      .clock(clock),
      .dm_addr_in(dm_addr),
      .dmb_ld_in(dmb_ld),
      .dmb_st_in(dmb_st),
      .dmb_wr_in(dmb_wr),
      .dmh_ld_in(dmh_ld),
      .dmh_st_in(dmh_st),
      .dmh_wr_in(dmh_wr),
      .dmw_ld_in(dmw_ld),
      .dmw_st_in(dmw_st),
      .dmw_wr_in(dmw_wr),
      .wdm_rd_in(wdm_rd),
      .dmb_rd_out(dmb_rd),
      .dmh_rd_out(dmh_rd),
      .dmw_rd_out(dmw_rd),
      .wdm_addr_out(wdm_addr),
      .wdm_ld_out(wdm_ld),
      .wdm_st_out(wdm_st),
      .wdm_wr_out(wdm_wr));

  dm_wbb inst_dm_wbb(
      .reset(reset),
      .clock(clock),
      .edm_rd_in(edm_rd),
      .wdm_addr_in(wdm_addr),
      .wdm_ld_in(wdm_ld),
      .wdm_st_in(wdm_st),
      .wdm_wr_in(wdm_wr),
      .edm_addr_out(edm_addr),
      .edm_ld_out(edm_ld),
      .edm_st_out(edm_st),
      .edm_wr_out(edm_wr),
      .wdm_rd_out(wdm_rd));

  controller inst_controller(
      .reset(reset),
      .clock(clock),
      .ohe_selector_EX(EX_enabling[16]),
      .bin_selector_ID(ID_enabling[3:2]),
      .cnd_in(cnd),
      .hzd_stall_in(hzd_stall),
      .issue_sig_in(issue_sig),
      .jmp_tgt_EX_in(jmp_tgt_EX),
      .jmp_tgt_ID_in(jmp_tgt_ID),
      .ocd_exe_in(ocd_exe),
      .ocd_instr_r_in(ocd_instr_r),
      .ocd_req_in(ocd_req),
      .pcr_in(pcr),
      .pm_rd_in(pm_rd_dp),
      .PC_ID_PC_ID_w_cntrl_issue_pdg_en_out(PC_ID_PC_ID_w_cntrl_issue_pdg_en),
      .PC_ID_w_out(PC_ID_w),
      .PC_pcw_cntrl_nxtpc_pdg_en_out(PC_pcw_cntrl_nxtpc_pdg_en),
      .kill_ID_out(kill_ID),
      .lnk_id_out(lnk_id),
      .ocd_mode_out(ocd_mode),
      .pcw_out(pcw),
      .pm_addr_out(pm_addr1),
      .pm_ld_pdg_en_out(pm_ld_pdg_en),
      .trn_ID_valid_out(trn_ID_valid),
      .trn_IR_ID_out(trn_IR_ID));

  reg_PC
  // synopsys translate_off
  #(.reg_log(reg_log))
  // synopsys translate_on
  inst_reg_PC(
      .reset(reset),
      .clock(clock),
      .PC_pcw_cntrl_nxtpc_pdg_en_in(PC_pcw_cntrl_nxtpc_pdg_en),
      .pcw_in(pcw),
      .pcr_out(pcr));

  reg_PC_ID
  // synopsys translate_off
  #(.reg_log(reg_log))
  // synopsys translate_on
  inst_reg_PC_ID(
      .clock(clock),
      .PC_ID_PC_ID_w_cntrl_issue_pdg_en_in(PC_ID_PC_ID_w_cntrl_issue_pdg_en),
      .PC_ID_w_in(PC_ID_w),
      .PC_ID_r_out(PC_ID_r));

  reg_PC_EX
  // synopsys translate_off
  #(.reg_log(reg_log))
  // synopsys translate_on
  inst_reg_PC_EX(
      .clock(clock),
      .ohe_selector_ID(ID_enabling[4]),
      .PC_EX_w_in(PC_EX_w),
      .hzd_stall_in(hzd_stall),
      .kill_ID_in(kill_ID),
      .PC_EX_r_out(PC_EX_r));

  reg_X
  // synopsys translate_off
  #(.reg_log(reg_log))
  // synopsys translate_on
  inst_reg_X(
      .reset(reset),
      .clock(clock),
      .bin_selector_EX(EX_enabling[18:17]),
      .X_x_w1_div_main_pdg_en_in(X_x_w1_div_main_pdg_en),
      .__X_x_r1_raddr_in(__X_x_r1_raddr),
      .__X_x_r2_raddr_in(__X_x_r2_raddr),
      .__X_x_r3_raddr_in(__X_x_r3_raddr),
      .__X_x_w1_wad_in(__X_x_w1_wad),
      .__X_x_w2_waddr_in(__X_x_w2_waddr),
      .x_w1_in(x_w1),
      .x_w2_in(x_w2),
      .x_r1_out(x_r1),
      .x_r2_out(x_r2),
      .x_r3_out(x_r3));

  reg_ocd_addr
  // synopsys translate_off
  #(.reg_log(reg_log))
  // synopsys translate_on
  inst_reg_ocd_addr(
      .reset(reset),
      .clock(clock),
      .__ocd_ld_DMbEX_r_in(__ocd_ld_DMbEX_r),
      .__ocd_ld_PMbEX_r_in(__ocd_ld_PMbEX_r),
      .__ocd_st_DMbEX_r_in(__ocd_st_DMbEX_r),
      .__ocd_st_PMbEX_r_in(__ocd_st_PMbEX_r),
      .en_ocd_addr_pdcw_in(en_ocd_addr_pdcw),
      .ocd_addr_pdcw_in(ocd_addr_pdcw),
      .ocd_addr_w_in(ocd_addr_w),
      .ocd_addr_pdcr_out(ocd_addr_pdcr),
      .ocd_addr_r_out(ocd_addr_r));

  reg_ocd_data
  // synopsys translate_off
  #(.reg_log(reg_log))
  // synopsys translate_on
  inst_reg_ocd_data(
      .reset(reset),
      .clock(clock),
      .__ocd_ld_DMbS3_r_in(__ocd_ld_DMbS3_r),
      .en_ocd_data_pdcw_in(en_ocd_data_pdcw),
      .ocd_data_pdcw_in(ocd_data_pdcw),
      .ocd_data_w_in(ocd_data_w),
      .ocd_data_pdcr_out(ocd_data_pdcr),
      .ocd_data_r_out(ocd_data_r));

  reg_ocd_instr
  // synopsys translate_off
  #(.reg_log(reg_log))
  // synopsys translate_on
  inst_reg_ocd_instr(
      .reset(reset),
      .clock(clock),
      .__ocd_ld_PMbS3_r_in(__ocd_ld_PMbS3_r),
      .en_ocd_instr_pdcw_in(en_ocd_instr_pdcw),
      .ocd_instr_pdcw_in(ocd_instr_pdcw),
      .ocd_instr_w_in(ocd_instr_w),
      .ocd_instr_pdcr_out(ocd_instr_pdcr),
      .ocd_instr_r_out(ocd_instr_r));

  mem_PMb inst_mem_PMb(
      .__ocd_ld_PMbEX_r_in(__ocd_ld_PMbEX_r),
      .__ocd_st_PMbEX_r_in(__ocd_st_PMbEX_r),
      .pm_ld_pdg_en_in(pm_ld_pdg_en),
      .pm_addr_dp_in(pm_addr_dp),
      .pm_rd_in(pm_rd),
      .pm_wr_dp_in(pm_wr_dp),
      .pm_addr_out(pm_addr),
      .pm_ld_out(pm_ld),
      .pm_rd_dp_out(pm_rd_dp),
      .pm_st_out(pm_st),
      .pm_wr_out(pm_wr));

  mem_DMb inst_mem_DMb(
      .bin_selector_EX(EX_enabling[21:19]),
      .bin_selector_ID(ID_enabling[7:5]),
      .__ocd_ld_DMbEX_r_in(__ocd_ld_DMbEX_r),
      .__ocd_st_DMbEX_r_in(__ocd_st_DMbEX_r),
      .__ocd_st_DMbS3_r_in(__ocd_st_DMbS3_r),
      .dm_addr_dp_in(dm_addr_dp),
      .dmb_rd_in(dmb_rd),
      .dmb_wr_dp_in(dmb_wr_dp),
      .dmh_rd_in(dmh_rd),
      .dmh_wr_dp_in(dmh_wr_dp),
      .dmw_rd_in(dmw_rd),
      .dmw_wr_dp_in(dmw_wr_dp),
      .hzd_stall_in(hzd_stall),
      .kill_ID_in(kill_ID),
      .dm_addr_out(dm_addr),
      .dmb_ld_out(dmb_ld),
      .dmb_rd_dp_out(dmb_rd_dp),
      .dmb_st_out(dmb_st),
      .dmb_wr_out(dmb_wr),
      .dmh_ld_out(dmh_ld),
      .dmh_rd_dp_out(dmh_rd_dp),
      .dmh_st_out(dmh_st),
      .dmh_wr_out(dmh_wr),
      .dmw_ld_out(dmw_ld),
      .dmw_rd_dp_out(dmw_rd_dp),
      .dmw_st_out(dmw_st),
      .dmw_wr_out(dmw_wr));

  mux_pm_addr inst_mux_pm_addr(
      .__ocd_ld_PMbEX_r_in(__ocd_ld_PMbEX_r),
      .__ocd_st_PMbEX_r_in(__ocd_st_PMbEX_r),
      .pm_ld_pdg_en_in(pm_ld_pdg_en),
      .ocd_addr_r_in(ocd_addr_r),
      .pm_addr1_in(pm_addr1),
      .pm_addr_out(pm_addr_dp));

  mux_pm_wr inst_mux_pm_wr(
      .__ocd_st_PMbEX_r_in(__ocd_st_PMbEX_r),
      .ocd_instr_r_in(ocd_instr_r),
      .pm_wr_out(pm_wr_dp));

  mux_dm_addr inst_mux_dm_addr(
      .ohe_selector_ID(ID_enabling[8]),
      .__ocd_ld_DMbEX_r_in(__ocd_ld_DMbEX_r),
      .__ocd_st_DMbEX_r_in(__ocd_st_DMbEX_r),
      .aguR_in(aguR),
      .ocd_addr_r_in(ocd_addr_r),
      .dm_addr_out(dm_addr_dp));

  mux_dmb_wr inst_mux_dmb_wr(
      .ohe_selector_EX(EX_enabling[22]),
      .__ocd_st_DMbS3_r_in(__ocd_st_DMbS3_r),
      .ocd_data_r_in(ocd_data_r),
      .x_r2_in(x_r2),
      .dmb_wr_out(dmb_wr_dp));

  mux_x_w1 inst_mux_x_w1(
      .bin_selector_EX(EX_enabling[25:23]),
      .X_x_w1_div_main_pdg_en_in(X_x_w1_div_main_pdg_en),
      .__CTt20s_rp12_cstP12_EX_in(C_t20s_rp12_EX_31_12),
      .__pidTGT_r_in(__pidTGT_r),
      .aluR_in(aluR),
      .lxR_in(lxR),
      .mpyH_in(mpyH),
      .mpyL_in(mpyL),
      .x_w11_in(x_w11),
      .x_w1_out(x_w1));

  mux_x_w1_dead inst_mux_x_w1_dead(
      .ohe_selector_EX(EX_enabling[26]),
      .cnn_R_in(cnn_R),
      .x_w1_in(x_w1),
      .x_w1_dead_out(x_w1_dead));

  mux_ocd_data_w inst_mux_ocd_data_w(
      .__ocd_ld_DMbS3_r_in(__ocd_ld_DMbS3_r),
      .dmb_rd_dp_in(dmb_rd_dp),
      .ocd_data_w_out(ocd_data_w));

  mux_ocd_instr_w inst_mux_ocd_instr_w(
      .__ocd_ld_PMbS3_r_in(__ocd_ld_PMbS3_r),
      .pm_rd_dp_in(pm_rd_dp),
      .ocd_instr_w_out(ocd_instr_w));

  mux_aluA inst_mux_aluA(
      .ohe_selector_EX(EX_enabling[27]),
      .PC_EX_r_in(PC_EX_r),
      .x_r1_in(x_r1),
      .aluA_out(aluA));

  mux_aluB inst_mux_aluB(
      .bin_selector_EX(EX_enabling[29:28]),
      .__CTt5u_cstP20_EX_in(reg_IR_EX[24:20]),
      .__CTt12s_cstP20_EX_in(C_t12s_EX_31_20),
      .__CTt20s_rp12_cstP12_EX_in(C_t20s_rp12_EX_31_12),
      .x_r2_in(x_r2),
      .aluB_out(aluB));

  mux_pcaA inst_mux_pcaA(
      .ohe_selector_ID(ID_enabling[9]),
      .PC_ID_r_in(PC_ID_r),
      .x_r3_in(x_r3),
      .pcaA_out(pcaA));

  mux_pcaB inst_mux_pcaB(
      .bin_selector_ID(ID_enabling[11:10]),
      .__CTt12s_cstP20_ID_in(C_t12s_ID_31_20),
      .__CTt13s_s2_cstP31_12P7_11P25_10_5P8_4_1_ID_in(C_t13s_s2_ID_31_7_30_25_11_8),
      .of21_in(of21),
      .pcaB_out(pcaB));

  mux_jmp_tgt_ID inst_mux_jmp_tgt_ID(
      .ohe_selector_ID(ID_enabling[12]),
      .jmp_tgt_algn2_in(jmp_tgt_algn2),
      .pcaR_in(pcaR),
      .jmp_tgt_ID_out(jmp_tgt_ID));

  mux_aguB inst_mux_aguB(
      .bin_selector_ID(ID_enabling[14:13]),
      .__CTt12s_cstP20_ID_in(C_t12s_ID_31_20),
      .__CTt12s_cstP25_11_5P7_4_0_ID_in(C_t12s_ID_31_25_11_7),
      .aguB_out(aguB));

  mux_mpyM inst_mux_mpyM(
      .bin_selector_EX(EX_enabling[31:30]),
      .mpyM_out(mpyM));

  mux_ocd_swbreak inst_mux_ocd_swbreak(
      .ohe_selector_EX(EX_enabling[32]),
      .ocd_swbreak_out(ocd_swbreak));

  pipe___pidTGT inst_pipe___pidTGT(
      .clock(clock),
      .__pidTGT_w_in(__pidTGT_w),
      .__pidTGT_r_out(__pidTGT_r));

  mux___pidTGT_w inst_mux___pidTGT_w(
      .ohe_selector_ID(ID_enabling[15]),
      .lnk_id_in(lnk_id),
      .pcaR_in(pcaR),
      .__pidTGT_w_out(__pidTGT_w));

  mux___X_x_w1_wad inst_mux___X_x_w1_wad(
      .ohe_selector_EX(EX_enabling[33]),
      .X_x_w1_div_main_pdg_en_in(X_x_w1_div_main_pdg_en),
      .__CTt5u_cstP7_EX_in(reg_IR_EX[11:7]),
      .X_x_w1_div_main_pdg_w_a_in(X_x_w1_div_main_pdg_w_a),
      .__X_x_w1_wad_out(__X_x_w1_wad));

  pipe___ocd_ld_DMbEX inst_pipe___ocd_ld_DMbEX(
      .clock(clock),
      .__ocd_ld_DMbID_w_in(__ocd_ld_DMbID_w),
      .__ocd_ld_DMbEX_r_out(__ocd_ld_DMbEX_r));

  pipe___ocd_ld_DMbS3 inst_pipe___ocd_ld_DMbS3(
      .clock(clock),
      .__ocd_ld_DMbEX_w_in(__ocd_ld_DMbEX_w),
      .__ocd_ld_DMbS3_r_out(__ocd_ld_DMbS3_r));

  pipe___ocd_st_DMbEX inst_pipe___ocd_st_DMbEX(
      .clock(clock),
      .__ocd_st_DMbID_w_in(__ocd_st_DMbID_w),
      .__ocd_st_DMbEX_r_out(__ocd_st_DMbEX_r));

  pipe___ocd_st_DMbS3 inst_pipe___ocd_st_DMbS3(
      .clock(clock),
      .__ocd_st_DMbEX_w_in(__ocd_st_DMbEX_w),
      .__ocd_st_DMbS3_r_out(__ocd_st_DMbS3_r));

  pipe___ocd_ld_PMbEX inst_pipe___ocd_ld_PMbEX(
      .clock(clock),
      .__ocd_ld_PMbID_w_in(__ocd_ld_PMbID_w),
      .__ocd_ld_PMbEX_r_out(__ocd_ld_PMbEX_r));

  pipe___ocd_ld_PMbS3 inst_pipe___ocd_ld_PMbS3(
      .clock(clock),
      .__ocd_ld_PMbEX_w_in(__ocd_ld_PMbEX_w),
      .__ocd_ld_PMbS3_r_out(__ocd_ld_PMbS3_r));

  pipe___ocd_st_PMbEX inst_pipe___ocd_st_PMbEX(
      .clock(clock),
      .__ocd_st_PMbID_w_in(__ocd_st_PMbID_w),
      .__ocd_st_PMbEX_r_out(__ocd_st_PMbEX_r));

  hazards inst_hazards(
      .hazards_decode_ID(ID_enabling[23:16]),
      .hazards_decode_EX(EX_enabling[34]),
      .Ch_t5u_EX_11_7(reg_IR_EX[11:7]),
      .Ch_t5u_ID_11_7(reg_IR_ID[11:7]),
      .Ch_t5u_ID_19_15(reg_IR_ID[19:15]),
      .Ch_t5u_ID_24_20(reg_IR_ID[24:20]),
      .div_adr_in(div_adr),
      .div_bsy_in(div_bsy),
      .div_wnc_in(div_wnc),
      .hzd_stall_out(hzd_stall));

  debug_controller
  #(.nid(nid))
  inst_debug_controller(
      .reset_ext(reset_ext),
      .clock(clock),
      .dbg_data_pi_in(dbg_data_pi),
      .dbg_data_we_in(dbg_data_we),
      .dbg_ext_break_in(dbg_ext_break),
      .dbg_instr_exec_in(dbg_instr_exec),
      .dbg_instr_in(dbg_instr),
      .ocd_addr_pdcr_in(ocd_addr_pdcr),
      .ocd_data_pdcr_in(ocd_data_pdcr),
      .ocd_instr_pdcr_in(ocd_instr_pdcr),
      .ocd_mode_in(ocd_mode),
      .ocd_swbreak_in(ocd_swbreak),
      .pcr_in(pcr),
      .dbg_data_po_out(dbg_data_po),
      .dbg_reset_out(dbg_reset),
      .dbg_set_break_out(dbg_set_break),
      .en_ocd_addr_pdcw_out(en_ocd_addr_pdcw),
      .en_ocd_data_pdcw_out(en_ocd_data_pdcw),
      .en_ocd_instr_pdcw_out(en_ocd_instr_pdcw),
      .ocd_addr_pdcw_out(ocd_addr_pdcw),
      .ocd_data_pdcw_out(ocd_data_pdcw),
      .ocd_exe_out(ocd_exe),
      .ocd_instr_pdcw_out(ocd_instr_pdcw),
      .ocd_ld_DMb_out(ocd_ld_DMb),
      .ocd_ld_PMb_out(ocd_ld_PMb),
      .ocd_req_out(ocd_req),
      .ocd_st_DMb_out(ocd_st_DMb),
      .ocd_st_PMb_out(ocd_st_PMb));

  decoder inst_decoder(
      .reset(reset),
      .clock(clock),
      .hzd_stall_in(hzd_stall),
      .kill_ID_in(kill_ID),
      .trn_ID_valid_in(trn_ID_valid),
      .trn_IR_ID(trn_IR_ID),
      .EX_enabling_out(EX_enabling),
      .ID_enabling_out(ID_enabling),
      .__X_x_r1_rad_out(__X_x_r1_raddr),
      .__X_x_r2_rad_out(__X_x_r2_raddr),
      .__X_x_r3_rad_out(__X_x_r3_raddr),
      .__X_x_w2_wad_out(__X_x_w2_waddr),
      .issue_sig_out(issue_sig),
      .reg_IR_EX_out(reg_IR_EX),
      .reg_IR_ID_out(reg_IR_ID));

endmodule
